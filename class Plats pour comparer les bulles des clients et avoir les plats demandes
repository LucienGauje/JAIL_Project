class Plats extends ZoneImage (){
	public HashMap <Integer, String> plats; //8plats
	public ArrayList <Integer> platsDemandes;
	public Plats(){
		plats = new HashMap <Integer, String> (8); //8plats
		plats.put(1,"onigiri");
		plats.put(2,"california-roll");
		plats.put(3,"gunkan-maki");
		plats.put(4,"salmon-sushi");
		plats.put(5,"shrimp-sushi");
		plats.put(6,"unagi-sushi");
		plats.put(7,"dragon-roll");
		plats.put(8,"combo");
		platsDemandes= new String[8];
		
	};
	public int Compare(BufferedImage i) { //compare i avec les images de references
		if (compareImage(i, SubImage.z1)== true) return 1;	//penser a faire un chemin pour image de reference car pas dans SubImage
		else if (compareImage(i, SubImage.z2)== true) return 2;
		else if (compareImage(i, SubImage.z3)== true) return 3;
		else if (compareImage(i, SubImage.z4)== true) return 4;
		else if (compareImage(i, SubImage.z5)== true) return 5;
		else if (compareImage(i, SubImage.z6)== true) return 6;
		else if (compareImage(i, SubImage.z7)== true) return 7;
		else if (compareImage(i, SubImage.z8)== true) return 8;
	}
	public static double compareImage(BufferedImage img1, BufferedImage img2){	//compare 2 images
	  if(img1.getWidth() != img2.getWidth() || img1.getHeight() != img2.getHeight()){ //si ils ont pas la même taille 
	   if(img1.getWidth()*img1.getHeight() < img2.getWidth()*img2.getHeight()){ //img1 plus petit que img2 
	    img2 = resize(img2, img1.getWidth(), img1.getHeight()); } 
	  else { //img2 plus petit que img1 
	    img1 = resize(img1, img2.getWidth(), img2.getHeight()); } 
	  } 
	  Color pixel1, pixel2; 
	  int r,g,b; 
	  for(int x = 0; x < img1.getWidth(); x++){ 
	   for(int y = 0; y < img1.getHeight(); y++){ 
	    pixel1 = new Color(img1.getRGB(x, y)); //pixel1 la couleur de img1 en x, y
	    pixel2 = new Color(img2.getRGB(x, y)); //pixel2 la couleur de img2 en x, y
	    int erreurs = 0;	//si decalage de pixel par rapport a l image de reference
	    int nbpixels=0;	//on conte le nombre de pixels
	     if (pixel1.getRed() != pixel2.getRed() || pixel1.getGreen() != pixel2.getGreen() || pixel1.getBlue() != pixel2.getBlue()){
		erreurs++;  //rajouter une erreur à erreurs
		}
	    nbpixels++;
	     }
	   }
	float proba=erreurs/nbpixels;
	if (proba>0.5) {	//si trop d erreurs alors pas les memes images
	  return false 
	}
	return true;
	} 
	
	private static BufferedImage resize(Image in, int width, int height){ //redimensionner une image
	  BufferedImage out = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB); 
	  Graphics g = out.createGraphics(); 
	  g.drawImage(in, 0, 0, width, height, null); 
	  g.dispose(); 
	  return out; 
	}
	
public ArrayList <Integer> PlatsDemandes(){ //compare tte les bulles avec les images de reference (appel a compare)
		for (BufferedImage bulle : SubImage.listeImage) {	//pour chaque bulle des clients
		this.platsDemandes.add( Compare(bulle) ); //ajout du 1er plat demande
		}
	}
}
