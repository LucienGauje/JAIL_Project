->envoyé à jialin.liu@inria.fr : toutes les personnes doivent etre en copie dans le mail

->compte-rendu sous le nom de 'Equipe2_MiniJava.zip' ~ 10/15pages

le code source (claire et commenté)
+ le rapport qui doit comporter :
  * la contribution claire et précise de chacun
  * la description des algorithmes et la hierarchie des classes du programme
  * l'organisation du travail, les problemes rencontrés et leur solution
  * les limites des solutions proposees
  * le manuel de l'utilisateur (explique ce qu'il doit faire pour utiliser l'IA)


         COMPTE-RENDU
         
Intro : (présenter le but, et parler des differentes choses, apprises durant le semestre, utilisé pour ce projet)

  Nous, une équipe de 3 personnes, avons réalisé un projet commun. Ceci est une 'Intelligence Artificielle' capable 
  de jouer à Sushi Go Round qui est un jeu à base de sprits. Les sprits sont des éléments graphiques de taille fixe, 
  positionnés à une zone donnée sur l'image du jeu. 
  Le but de ce jeu est d'identifier/analyser les commandes des clients, les fabriquer puis servir ces clients.
  
    Afin d’être capable de jouer à ce jeu, plusieurs aptitudes/compétences doivent être mises en pratique telles que :
	- de reconnaître un sprit, correspondant à un plat demandé, dans la bulle de chaque client qui sont au nombre 
	de 6
	- de rechercher dans la base de données/classe Recette, les ingrédients ainsi que leur nombre  dont nous avons
	besoin pour la préparation du plat
	- de cliquer sur les différentes zones qui correspondent aux différents ingrédients
	- de cliquer sur le tapis pour obtenir le plat souhaité et pour servir le client
	- de cliquer sur l'assiette vide du client une fois qu'il est parti pour qu'un autre client puisse commander
Il faut également pouvoir commander de nouveaux ingrédients à l'aide du téléphone, si nous sommes en rupture de stock.
 Toutes ces aptitudes/compétences peuvent etre classées en 3 catégories :
	- le traitement d'image ainsi que sa capture faite auparavant
	- les actions qui en découlent
	- et la capacité de lier traitement d'image et actions (appels de fonctions)
	
   Cela nous amène au point des différentes compétences apprises au cours de ce semestre qui ont été utiles pour mener 
   à bien ce projet. 
 Le code du projet se fait en langage JAVA. De plus, nous avons élaboré un diagramme de classes c'est à dire un 
 diagramme parlant de l'héritage/ la hiérarchisation des classes crées. Ceci fait référence au cours de POnGL 
 (programmation objet et génie logiciel). 
 (au moins encore 1 cours en +, peut etre maths pour info pour l'algorithme)
 
   Dans ce rapport, nous allons donc détailler la répartition du travail, les algorithmes choisis, la hiérarchie des 
   classes construites ainsi que les divers problèmes rencontrés et leur solutions. Nous fourniront, par la suite, un 
   manuel afin d'utiliser notre 'Intelligence Artificielle'.

I) contribution claire et précise de chacun
( Jeremie :  class CliqueDefault{}(CliqueAssiette() ) , class Commande (verifIngredient() )
Asma :
Lucien : class Recette{}, class Commande{}, class Ingredient{}, class SubImage{}
Isaline : class CaptureEcran{}, class CreerPlat{}, (class CompareImage{}), class Jeu{} (JeuPlat(), JeuVerifIngredient(), 
JeuCliqueDefault() ), class CliqueDefault{} (CliqueSuivant() )
)

Nous nous sommes répartis le travail comme suit :
- Jeremie s'est occupé de la partie traitement d'image concernant la vérification du nombre d'ingrédient en stock et 
de la partie action par rapport au fait de cliquer sur les différentes assiettes vides.
Il a donc crée la méthode 'verifIngredient()'  de la classe 'Commande' et la méthode 'cliqueAssiette()' de la classe 
'CliqueDefault'. //a t on verifIngredient??
- Lucien s'est concentré sur la base de données Recette pour préparer les plats, la partie action au sujet du fait de 
cliquer sur les différents ingrédients, de cliquer sur le tapis ainsi que la partie traitement d'image touchant 
l'attribution des différentes zones (zones cliquables, zones bulle des clients) pour une image donnée (capture d’écran).
Il a donc crée la classe 'Recettes', la classe 'Ingredient', la classe'Commande' et la classe 'SubImage'.
- Isaline s'est chargé de la partie traitement d'image concernant la capture de l’écran du jeu, et la comparaison 
d'images pixel à pixel (bulle d'un client et plats pouvant être fabriqués) afin de déterminer le plat demandé ainsi 
que la création d'une base de données des divers plats demandés par les clients et s'est chargé de la partie action 
servant à cliquer au bon endroit lors du début du jeu, et pour le passage au niveau suivant.
Elle a donc crée la classe 'CaptureEcran', la classe 'CompareImage', la classe 'CreerPlat' et les méthode 'Debut' 
et 'NiveauSuivant()' de la classe 'CliqueDefault'.
Elle a également établit un lien entre le traitement d'image et les actions en découlant c'est à dire : pour chaque 
plat dans le tableau des plats demandés, il y a appel à une fonction créant ce plat; appel à une fonction vérifiant 
s'il y a assez d’ingrédient, s'il n'y en a pas assez, alors appel à une fonction commandant cette ingrédient; pour 
chaque assiette reconnu, il y a appel à une fonction cliquant sur cette assiette. Cela correspond à la classe 'Jeu'.
- Asma s'est occupé de/concentré sur...

II) description des algorithmes et la hierarchie des classes du programme(Diagramme de classes)

DESCRIPTIF DES ALGO //à continuer
Tout au long de ce projet, nous avons utilisé des classes de l'API standard comme
- la classe 'BufferedImage' dans le but d'analyser, manipuler des images avec les méthodes :
	→ getSubimage (int x, int y, int w, int h) qui retourne une sous-image définie par une zone rectangulaire 
	spécifiée
	→ getRGB(int x, int y) qui retourne une couleur des 3 pixels (rouge, vert, bleu) d'entiers (entre 0 et 255)
- la classe 'ImageIO' pour récupérer les images de références dans le dossier du code à l'aide de la méthode :
	→ read (new File(chemin de l'image) qui retourne une BufferedImage de l'image donnée en paramètre.
- la classe'Robot' afin de faire une capture d’écran, de manipuler la souris et  d'attendre que tous les événements 
actuellement sur la file d'attente d'événements ont été traités à l'aide des méthodes suivantes:
	→ createScreenCapture (Rectangle screenRect) qui crée une image (BufferedImage) contenant des pixels lues 
	à partir de l'écran
	→ mouseMove (int x, int y) qui déplace le pointeur de la souris aux coordonnées écran donnée 
	→ mousePress (int buttons) qui presse un ou plusieurs boutons de la souris
	→  'waitForIdle()' qui attend que tous les événements créés ont été réalisés

->Comparaison d'images
Il s'agit d'une comparaison pixel à pixel de 2 images données en paramètre. 
Pour cela, nous avons crée une fonction qui redimensionne une image trop grande ou trop petite par rapport à 
l'autre image. 
Nous avons aussi codé une fonction booléenne retournant vraie si les 2images sont identique. Elle vérifie si ces 
images sont à la même taille et si chaque pixel d'une image est similaire à un pixel de l'autre image aux mêmes 
endroits. En effet, si le pixel d'une image est différent de celui de l'autre image, on incrémente un compteur 
erreur tout en comptant le nombre total de pixels des images. Ensuite, on calcule un rapport entre le nombre 
d'erreurs et le nombre total de pixels. C'est donc un flottant variant entre 0 et 1. Si ce rapport est supérieur 
à 0.5 alors les 2 images ne sont pas les mêmes. Cela retourne donc faux. Sinon, le résultat est vrai.
Cette comparaison d'images est implémenté dans la classe 'CompareImage()'

->Analyse des plats demandés et leur fabrication
Afin de savoir quel type de plat il faut préparer, il faut d'abord faire une analyse de l'image au niveau des bulles 
des 6 clients.
Pour se faire, on crée une HashMap de référence comportant chacun des 8 plats. 
Ensuite, nous avons codé une fonction 'Compare(BufferedImage i)' qui compare une seule BufferedImage donnée en 
parametre avec les plats de référence stockés dans cette classe. Il retourne le plat de référence qui est similaire 
à la BufferedImage donnée.
Nous avons également élaboré une méthode 'PlatsDemandes()' qui emmagasine les plats retournés par la fonction 
'Compare(BufferedImage i)' avec i étant chacun des plats voulus par les clients. Ce stockage se fait sous forme 
d'une 'ArrayList<Integer>'. En effet, chaque entier de 1 à 8 est associé à un plat de référence. (1 pour , 2 pour, 
3 pour, 4 pour, 5 pour, 6 pour, 7 pour, 8 pour ).
Enfin, nous avons conçu une fonction 'getPlatsDemandes()' retournant l'ArrayList des differents plats souhaités par 
les 6 clients.  

HIERARCHIE DES CLASSES //à étoffer
Le programme est organisée autour de 9 classes : 
→ la classe 'jeu' qui a 3 méthodes et un constructeur
Ceci est la classe principale du programme servant de lien entre traitement d'image et actions. 
La méthode 'JeuPlats()' permet de préparer chacun des 6 plats demandés. 
La méthode 'JeuDefault()' 
La méthode 'JeuVerifIngredient()'
→ la classe 'CaptureEcran' qui a 1 attribut et 1 méthode
Elle sert, comme son nom l'indique, à faire une capture d'écran et stocke cette BufferedImage obtenu dans sa classe.
(peut etre rajouté getCapture() pour mettre l'attribut en private)
→ la classe 'SubImage' qui a 3 attributs et 2 méthodes
Elle différencie, à partir de la capture d’écran, différentes sous-images telles que les zones cliquables et les bulles 
des clients.
→ la classe 'cliqueDefault' qui a 2 méthodes
Cette classe sert à cliquer lors d'un début de jeu, du passage au niveau suivant ou lorsqu'une assiette d'un client 
est vide.
→ la classe 'CompareImage'qui a 1attribut et 2 méthodes 
Cette classe est utilisée pour la comparaison d'images.
→ la classe 'CreerPlats' qui a 2 attributs, 1 constructeur et 2 méthodes
Elle sert à analyser et stocker dans une liste les plats demandés par les clients.
→ la classe 'Ingrédient' qui a 1 attribut et 8 méthodes
Elle sert à cliquer sur les ingrédients ou sur le tapis.
→ la classe 'Recettes' qui a 7 méthodes
Cette classe sert à appeler des méthodes de la classe ingrédient suivant le plat demandé.
→ la classe 'Commande' qui a ? méthodes
Elle sert à cliquer sur le téléphone pour commander l'ingrédient en rupture de stock.

III) organisation du travail, les problemes rencontrés et leur solution

- prob: comparaison d'images (peut etre??) + traitement de la BufferedImage 'CaptureEcran'  + chargement des plats de références

- solutions: Pour la comparaison d'image, nous avions commencer par penser a une méthode compparanr pixel par pixel les
deux images (celles de référence et l'image que l'ont voulais comparer), mais nous avons rapidement vue les limites d'une
telle méthode, c'est à dire que même si un seul pixel est différent, la méthode n'aurait pas reconnue l'image.
C'est pour cela que nous avons trouver une autre méthode qui consiste à prendre les images à comparer
puis de couper chacune de ces images en plusieurs parties. Ainsi, nous comparons la somme de ces pixels
dans chaqu'une des parties pour les comparer à la somme des parties de l'autre image en utilisant la somme
des différences absolues.
Enfin nous pouvons déterminer l'image la plus similaire a celle comparé, c'est à dire l'image qui a la somme
la plus basse par bloc est la plus similaire.

->problème pour le traitement de la BufferedImage 'CaptureEcran'  //à compléter
Le but étant d'analyser l'image de la classe 'CaptureEcran', il fallait découper l'image en plusieurs petites images 
qui par la suite seront utilisées à des fins différentes telles que déterminer les plats demandés des clients ou 
cliquer sur les différents ingrédients pour fabriquer un plat souhaité.
Au début, ….
Par la suite, nous avons convenu de créer divers SubImages et de stockées celles-ci dans la classe SubImage 
préalablement conçue. L'utilisation de la méthode 'getSubimage()' de la classe 'BufferedImage' a été requise.

->problème pour le chargement des images concernant les plats de référence pour la classe CreerPlat
Le but étant de stocker les 8 plats de références du jeu sous forme de BufferedImages, il fallait d'abord charger 
nos images de références rangés/entreposés/emmagasinés au format png dans le dossier de code. 
Au début, nous avons codé cette partie avec la méthode 'getInstance()' de la classe Image retournant une image de 
type Image. Il fallait ensuite convertir cette image en BufferedImage afin de les comparer avec nos BufferedImages 
du jeu. 
Cependant, le compilateur a présenté une incompatibilité d'origine inconnue. Nous avons donc réétudier en amont
cette portion de code. 
Au terme de quelques recherches,  nous avons trouvé une méthode permettant le chargement des images souhaités. Il 
s'agit de la méthode 'read()' de la classe 'ImageIO' qui lit une image et la retourne sous forme d'une BufferedImage.
Nous n'avions donc plus à convertir, en BufferedImage, l'image chargée et stockée.

IV) annexe : le manuel de l'utilisateur

Conclusion : 
découvertes des classe de l’API standard tels que 'BufferedImage', 'ImageIO', 'Robot', et de 'threads'
comprendre le traitement d'images et les pixels associés
